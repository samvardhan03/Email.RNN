# -*- coding: utf-8 -*-
"""RNN email.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1unsyRoOj588pINCY-DwLjRRS9r61_4ZQ
"""

!pip uninstall tensorflow -y

!pip install tensorflow

import tensorflow as tf
print(tf.__version__)

!pip install keras

import pandas as pd
import numpy as np
import re
import nltk
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional
from keras.optimizers import Adam
from keras.callbacks import EarlyStopping, ModelCheckpoint

nltk.download('stopwords')

# Load the dataset
df = pd.read_csv("Dataset.csv", header=None)

# Renaming columns
df.columns = ['email_type', 'content']

# Check for invalid label values
invalid_labels = df[~df['email_type'].isin(range(1, 19))]
if not invalid_labels.empty:
    print("Invalid label values found:")
    print(invalid_labels)

# Remove rows with invalid label values
df = df[df['email_type'].isin(range(1, 19))]

# Data preprocessing
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'http\S+', '', text)  # Remove URLs
    text = re.sub(r'<.*?>', '', text)  # Remove HTML tags
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # Remove special characters (retain numbers)
    text = ' '.join([word for word in text.split() if word not in stopwords.words('english')])  # Remove stopwords
    return text

df['content'] = df['content'].apply(preprocess_text)

# Tokenization and Padding
tokenizer = Tokenizer()
tokenizer.fit_on_texts(df['content'])
X_seq = tokenizer.texts_to_sequences(df['content'])
max_length = 500
X_pad = pad_sequences(X_seq, maxlen=max_length, padding='post')

# Update labels
y = df['email_type'].values - 1  # Convert labels to 0-based indices

# Split dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X_pad, y, test_size=0.2, random_state=42)

# Define the model
embedding_dim = 300
vocab_size = len(tokenizer.word_index) + 1

model = Sequential()
model.add(Embedding(input_dim=vocab_size, output_dim=embedding_dim))
model.add(Bidirectional(LSTM(128)))
model.add(Dropout(0.5))
model.add(Dense(18, activation='softmax'))

# Compile the model
optimizer = Adam(learning_rate=0.001)
model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
early_stop = EarlyStopping(monitor='val_loss', patience=3)
checkpoint = ModelCheckpoint('best_model.keras', monitor='val_loss', save_best_only=True)
history = model.fit(X_train, y_train, epochs=45, batch_size=32, validation_data=(X_test, y_test),
                    callbacks=[early_stop, checkpoint])

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Loss: {loss}, Test Accuracy: {accuracy}")

# Save tokenizer and model
model.save("email_classification_model.h5")
tokenizer_json = tokenizer.to_json()
with open("tokenizer.json", "w") as json_file:
    json_file.write(tokenizer_json)



